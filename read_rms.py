#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Nov 21 10:52:21 2017

@author: Neo

Retrieve the estimates of positions of global stations and the formal
uncertainties of these estimates from .sta file which is generated by
the program getpar.

"""

import numpy as np
import sys
import matplotlib.pyplot as plt


# ------------------------------  FUNCTIONS  ---------------------------
def plot_rms_num(obsnum, wrmsd, wrmsr):
    '''Plot the wrms of delay / delay rate vs No.obs
    '''
    fig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)
    ax0.plot(obsnum, wrmsd, '.')
    ax0.set_title("Delay (ps)")
    ax0.set_ylim([0, 200])
    ax1.plot(obsnum, wrmsr, '.')
    ax1.set_title("Delay rate (fs/s)")
    ax1.set_ylim([0, 12500])
    ax1.set_xlabel("Number of observations")
    ax1.set_xlim([0, 30000])
    plt.savefig("figures/wrms_num.eps")
    plt.close()


def plot_rms_epo(epo, wrmsd, wrmsr):
    '''Plot the wrms of delay / delay rate vs No.obs
    '''
    fig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)
    ax0.plot(epo, wrmsd, '.')
    ax0.set_title("Delay (ps)")
    ax0.set_ylim([0, 200])
    ax1.plot(epo, wrmsr, '.')
    ax1.set_title("Delay rate (fs/s)")
    ax1.set_ylim([0, 12500])
    ax1.set_xlabel("Number of observations")
    ax1.set_xlim([1979, 2018])
    plt.savefig("figures/wrms_epo.eps")
    plt.close()


def read_rms(datafile):
    '''Retrieve the result from .rms file.

    Parameters
    ----------
    datafile : string
        name of data file

    Returns
    ----------
    dbname : array, string
       database name with leading dollar sign
    obsnum : array, int
        number of observations used
    epo : array, float
        epoch
    wrmsd : array, float
        overall wrms of postfit delay residuals, psec
    wrmsr : array, float
        overall wrms of postfit delay rate residuals, fsec/s
    '''

    dbname = np.genfromtxt(datafile, dtype=str, usecols=(1,))
    obsnum = np.genfromtxt(datafile, dtype=int, usecols=(2,))
    wrmsd, wrmsr = np.genfromtxt(datafile, usecols=(3, 5), unpack=True)

    fnut = "%s.nut" % datafile[:-4]
    dbname0 = np.genfromtxt(fnut, dtype=str, usecols=(1,))
    epo0 = np.genfromtxt(fnut, usecols=(4,))
    epo = np.zeros_like(epo0)
    for i, db in enumerate(dbname):
        j = np.where(dbname0 == db)[0][0]
        epo[i] = epo0[j]

    return dbname, obsnum, epo, wrmsd, wrmsr


# Retrieve estimates.
if len(sys.argv) == 1:
    datafile = 'result/test.rms'
else:
    datafile = sys.argv[1]
dbname, obsnum, epo, wrmsd, wrmsr = read_rms(datafile)
# print(dbname[0],
#       obsnum[0],
#       epo[0],
#       wrmsd[0],
#       wrmsr[0])

plot_rms_num(obsnum, wrmsd, wrmsr)
plot_rms_epo(epo, wrmsd, wrmsr)
# ------------------------------ END -----------------------------------
