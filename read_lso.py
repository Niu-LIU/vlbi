#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Nov 21 11:01:52 2017

@author: Neo

Retrieve the estimates of positions of local stations and the formal
uncertainties of these estimates from .lst file which is generated by
the program getpar.


   .lso file file contains estimates of right ascension and declination of
local sources, as well as formal their uncertainties and correlations between
right ascension and declination of the same source. It contains also the time
tag of the estimates of right ascension and declination. File is sorted in
order of sessions and in order of appearance of local sources in the session.

   File contains records of two types:
1) Comment. The first character is #. Header comment contain the full name of
   the spool file.

2) Estimates.

   Field   Format Units  Meaning
   1-8     A8     --     record type identifier: SOU_LSO:
   11-18   A8     --     IVS source name.
   21-30   A10    --     database name with leading dollar sign
   33-35   I3     --     database version number
   47-56   F10.5  years  time tag: time of the middle epoch of the observing
                         session in Julian years since 0000.01.01_00:00
   63-64   I2     hours  right ascension. hours part
   65-65   A1     --     separator "_"
   66-67   I2     min.   right ascension. minutes part
   68-68   A1     --     separator "_"
   69-79   F11.8  sec.   right ascension. seconds part
   84-93   F10.4  mas    formal error of right ascension
   100-102 I3     deg.   declination. degrees part.
   103-103 A1     --     separator "_"
   104-105 I2     arcmin declination. arcminutes part.
   106-106 A1     --     separator "_"
   107-116 F10.7  arcsec declination. arcseconds part.
   121-130 F10.4  mas    formal uncertainty of declination
   138-144 F7.4   --     Correlation between right ascension and declination
   151-154 I4     --     Number of used observations of this source
   158-161 I4     --     Total number of observations of this source

"""

import numpy as np
import sys
from pos_conv import RA_conv, DC_conv
from get_pv import get_dat, get_sou_pv
from write_pv import write_sou_pv
from plot_data import plot_sou_pv


# ------------------------------  FUNCTIONS  ---------------------------
def wp_sou_pos(souname, soulist, epo, dbname,
               RA, DC, RA_err, DC_err, cor):
    '''write and plot the positions/proper-motions of each sources.

    Parameters
    ----------
    datafile : string
        name of data file
    souname : array, string
        IVS source name
    soulist : array, string
        list of all source names in all sessions
    epo : array, float
        time lag, year
    dbname : array, string
        database name with leading dollar sign
    RA : array, float
        Right ascension, degree
    RA_err : array, float
        formal uncertainty of RA, mas
    DC : array, float
        Declination, degree
    DC_err : array, float
        formal uncertainty of DC, mas
    Cor : array, float
        correlation between RA and DC

    Returns
    ----------
      None.
    '''
    eposou = get_dat(souname, soulist, epo)

    # For geocentric position
    [RAsou, DCsou, RAsou_err, DCsou_err, corsou] = get_sou_pv(
        souname, soulist, RA, DC, RA_err, DC_err, cor)
    write_sou_pv(souname, eposou,
                 RAsou, DCsou, RAsou_err, DCsou_err, corsou, 'P')
    plot_sou_pv(souname, eposou,
                RAsou, DCsou, RAsou_err, DCsou_err, 'P')


def read_lso(datafile):
    '''Retrieve the result from .lso file.

    Parameters
    ----------
    datafile: string
        name of data file

    Returns
    ----------
    None
    '''

    soulist, dbname = np.genfromtxt(datafile,
                                    dtype=str, usecols=(1, 2), unpack=True)
    epo = np.genfromtxt(datafile, usecols=(5,))
    RA, RA_err, DC, DC_err, cor = np.genfromtxt(
        datafile, usecols=np.arange(7, 16, 2),
        converters={7: RA_conv, 11: DC_conv},
        missing_values='*'*8,
        filling_values=0.,
        unpack=True)

    NOUsed, NOTotal = np.genfromtxt(
        datafile, usecols=(17, 19), dtype=int, unpack=True)

    souset = set(soulist)
    for souname in souset:
        wp_sou_pos(souname, soulist, epo, dbname,
                   RA, DC, RA_err, DC_err, cor)


# Retrieve estimates.
# if len(sys.argv) == 1:
#     datafile = 'result/test.lso'
# else:
#     datafile = sys.argv[1]
# read_lso(datafile)
# ------------------------------ END -----------------------------------
