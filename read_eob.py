#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Nov 21 10:52:21 2017

@author: Neo


Dec 8, N. Liu : modify the bugs in Sect. 3.10 of the help document of getpar_02
                25 ----> cor(U, UR)
                26 ----> cor(X, UR)
                27 ----> cor(Y, UR)

11 Jan 2018, N. Liu : set the zero-formal-uncertainty to 0.999999


Retrieve the estimates of X pole coordinate, Y pole coordinate, UT1-TAI
angle, UT1 rate, daily offsets of nutation angles as well as their formal
uncertainties and correlations from .eob file which is generated by
the program getpar.

"""

from astropy.table import Table
import astropy.units as u
from astropy.units import cds
import numpy as np


__all__ = {"read_eob", "read_eops"}


# ------------------------------  FUNCTIONS  ---------------------------
def read_eob(eob_file):
    '''Retrieve the result from .eob file.

    Parameters
    ----------
    eob_file : string
        name of data file

    Returns
    ----------
    dbname : array, string
       database name with leading dollar sign
    tag_eop : array, float
        EOP time flag, modified Julian data
    tag_nut : array, float
        Nutation time flag, modified Julian data
    obsnum : array, int
        number of observations used
    X : array, float
        X-pole coordinate, mas
    X_err : array, float
        formal uncertainty of X, mas
    Y : array, float
        Y-pole coordinate, mas
    Y_err : array, float
        formal uncertainty of Y, mas
    U : array, float
        UT1 - TAI, msec
    U_err : array, float
        formal uncertainty of U, msec
    XR : array, float
        X-pole coordinate rate, mas/day
    XR_err : array, float
        formal uncertainty of XR, mas/day
    YR : array, float, mas/day
        Y-pole coordinate rate, mas/day
    YR_err : array, float
        formal uncertainty of YR, mas/day
    UR : array, float
        UT1 - TAI rate, msec/day
    UR_err : array, float
        formal uncertainty of UR, msec/day
    P : array, float
        nutation in longitude, mas
    P_err : array, float
        formal uncertainty of P, mas
    E : array, float
        nutation on obliquity, mas
    E_err : array, float
        formal uncertainty of E, mas
    corXY : array, float
        correlation between X and Y
    corXU : array, float
        correlation between X and U
    corYU : array, float
        correlation between Y and U
    corPE : array, float
        correlation between X and Y
    corXUR : array, float
        correlation between X and UR
    corYUR : array, float
        correlation between Y and UR
    corUUR : array, float
        correlation between U and UR
    '''

    t_eob = Table.read(eob_file, format="ascii",
                       names=["time_tag_pmr", "db_name",
                              "xp", "yp", "ut1_tai", "dX", "dY",
                              "xp_rate", "yp_rate", "ut1_rate",
                              "xp_err", "yp_err", "dut1_err",
                              "dX_err", "dY_err",
                              "xp_rate_err", "yp_rate_err", "ut1_rate_err",
                              "xp_yp_corr", "xp_ut1_corr", "yp_ut1_corr",
                              "dX_dY_corr", "xp_ut1rate_corr",
                              "yp_ut1rate_err", "ut1_ut1rate_corr",
                              "sess_dur", "wrms", "num_obs",
                              "time_tag_nut", "network"])

    # Add the unit information
    # 1) Time tag
    t_eob["time_tag_pmr"].unit = cds.MJD
    t_eob["time_tag_nut"].unit = cds.MJD

    # 2) polar motion (wobble) and rate
    t_eob["xp"].unit = u.arcsec
    t_eob["yp"].unit = u.arcsec
    t_eob["xp_err"].unit = u.arcsec
    t_eob["yp_err"].unit = u.arcsec
    t_eob["xp_rate"].unit = u.arcsec / u.day
    t_eob["yp_rate"].unit = u.arcsec / u.day
    t_eob["xp_rate_err"].unit = u.arcsec / u.day
    t_eob["yp_rate_err"].unit = u.arcsec / u.day

    # 3) UT1-TAI/UT1-UTC and rate
    t_eob["ut1_tai"].unit = u.second
    t_eob["dut1_err"].unit = u.second
    t_eob["ut1_rate"].unit = u.second / u.day
    t_eob["ut1_rate_err"].unit = u.second / u.day

    # 4) Nutation offset
    t_eob["dX"].unit = u.mas
    t_eob["dY"].unit = u.mas
    t_eob["dX_err"].unit = u.mas
    t_eob["dY_err"].unit = u.mas

    # Other information
    t_eob["sess_dur"].unit = u.hour
    t_eob["wrms"].unit = u.ps

    return t_eob


def read_eops(eops_file):
    """Read data from .eops file.

    Parameters
    ----------
    eops_file : string
        name of data file

    Returns
    ----------
    db_name : array, string
       database name with leading dollar sign
    mjd : array, float
        reference epoch, modified Julian data
    obs_num : array, int
        number of observations used
    sess_len : array, float
        session duration
    rms : array, float
        postfit rms delay in ps
    xp : array, float
        X-pole coordinate, mas
    xp_err : array, float
        formal uncertainty of xp, mas
    yp : array, float
        Y-pole coordinate, mas
    yp_err : array, float
        formal uncertainty of yp, mas
    ut : array, float
        UT1 - TAI, mas
    ut_err : array, float
        formal uncertainty of ut, mas
    xpr : array, float
        X-pole coordinate rate, mas/day
    xpr_err : array, float
        formal uncertainty of xpr, mas/day
    ypr : array, float, mas/day
        Y-pole coordinate rate, mas/day
    ypr_err : array, float
        formal uncertainty of ypr, mas/day
    utr : array, float
        UT1 - TAI rate, mas/day
    utr_err : array, float
        formal uncertainty of utr, mas/day
    dx : array, float
        Celestial pole offset dX wrt IAU 2006, mas
    dx_err : array, float
        formal uncertainty of dX, mas
    dy : array, float
        Celestial pole offset dY wrt IAU 2006, mas
    dy_err : array, float
        formal uncertainty of dY, mas
    xp_yp_corr : array, float
        correlation between xp and yp
    xp_ut_corr : array, float
        correlation between xp and ut
    yp_ut_corr : array, float
        correlation between yp and ut
    dx_dy_corr : array, float
        correlation between dx and dy
    """

    db_name = np.genfromtxt(eops_file, usecols=(11,), dtype=str)

    mjd, sess_len, rms = np.genfromtxt(
        eops_file, usecols=(0, 18, 29), unpack=True)

    obs_num = np.genfromtxt(
        eops_file, usecols=(16,), dtype=int, unpack=True)

    # Earth orientation parameters
    xp, yp, ut, dx, dy = np.genfromtxt(
        eops_file, usecols=range(1, 6), unpack=True)
    xp_err, yp_err, ut_err, dx_err, dy_err = np.genfromtxt(
        eops_file, usecols=range(6, 11), unpack=True)

    # Correlation
    xp_yp_corr, xp_ut_corr, yp_ut_corr, dx_dy_corr = np.genfromtxt(
        eops_file, usecols=range(12, 16), unpack=True)

    # EOP rate
    xpr, ypr, utr = np.genfromtxt(
        eops_file, usecols=range(19, 22), unpack=True)
    xpr_err, ypr_err, utr_err = np.genfromtxt(
        eops_file, usecols=range(24, 27), unpack=True)

    return [db_name, mjd, obs_num, sess_len, rms,
            xp, yp, ut, dx, dy,
            xp_err, yp_err, ut_err, dx_err, dy_err,
            xp_yp_corr, xp_ut_corr, yp_ut_corr, dx_dy_corr,
            xpr, ypr, utr, xpr_err, ypr_err, utr_err]


# ------------------------------  MAIN BODY  ---------------------------
def main():
    print("Nothing to do!")
    pass


if __name__ == '__main__':
    main()
# ------------------------------ END -----------------------------------
